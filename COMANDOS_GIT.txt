# üìù COMANDOS PARA SUBIR A GITHUB
# =================================

# PREPARACI√ìN INICIAL
# -------------------

# 1. Inicializar repositorio Git (si no existe)
git init

# 2. Configurar informaci√≥n del usuario (si es la primera vez)
git config --global user.name "Tu Nombre"
git config --global user.email "tuemail@ejemplo.com"

# 3. A√±adir todos los archivos
git add .

# 4. Crear commit inicial
git commit -m "Initial commit: Proyecto educativo de Redes Neuronales con Gradio"

# 5. Configurar rama principal
git branch -M main

# 6. A√±adir repositorio remoto
git remote add origin https://github.com/efrenbohorquez/Aprende-sobre-Redes-Neuronales-de-Forma-Interactiva.git


# SUBIR A GITHUB
# --------------

# Opci√≥n 1: Si el repositorio est√° vac√≠o
git push -u origin main

# Opci√≥n 2: Si el repositorio tiene contenido existente
git pull origin main --allow-unrelated-histories
git push -u origin main


# ACTUALIZACIONES FUTURAS
# ------------------------

# 1. Ver estado de los archivos
git status

# 2. A√±adir cambios
git add .
# o a√±adir archivo espec√≠fico
git add nombre_archivo.py

# 3. Crear commit con mensaje descriptivo
git commit -m "Update: descripci√≥n de los cambios"

# 4. Subir cambios
git push


# COMANDOS √öTILES
# ---------------

# Ver historial de commits
git log --oneline

# Ver diferencias
git diff

# Ver archivos modificados
git status

# Deshacer cambios no guardados
git checkout -- archivo.py

# Crear una nueva rama
git checkout -b nombre-rama

# Cambiar de rama
git checkout nombre-rama

# Fusionar rama
git merge nombre-rama

# Ver ramas
git branch


# SOLUCI√ìN DE PROBLEMAS
# ----------------------

# Si olvidaste a√±adir archivos al √∫ltimo commit
git add archivo_olvidado.py
git commit --amend --no-edit

# Si necesitas cambiar el mensaje del √∫ltimo commit
git commit --amend -m "Nuevo mensaje"

# Si necesitas eliminar el √∫ltimo commit (SIN perder cambios)
git reset --soft HEAD~1

# Si necesitas eliminar el √∫ltimo commit (CON p√©rdida de cambios)
git reset --hard HEAD~1

# Si hay conflictos al hacer pull
git pull origin main --allow-unrelated-histories
# Resolver conflictos manualmente
git add .
git commit -m "Merge: resolver conflictos"
git push


# VERIFICAR CONFIGURACI√ìN
# -----------------------

# Ver configuraci√≥n actual
git config --list

# Ver remote configurado
git remote -v

# Verificar rama actual
git branch


# CLONAR PROYECTO (para otros usuarios)
# --------------------------------------

git clone https://github.com/efrenbohorquez/Aprende-sobre-Redes-Neuronales-de-Forma-Interactiva.git
cd Aprende-sobre-Redes-Neuronales-de-Forma-Interactiva
python -m venv .venv
# Windows
.\.venv\Scripts\activate
# macOS/Linux
source .venv/bin/activate
pip install -r requirements.txt
python main.py


# NOTAS IMPORTANTES
# -----------------

# ‚úÖ Siempre hacer 'git pull' antes de 'git push'
# ‚úÖ Escribir mensajes de commit descriptivos
# ‚úÖ Hacer commits peque√±os y frecuentes
# ‚úÖ No subir archivos grandes (modelos entrenados, datasets)
# ‚úÖ Usar .gitignore para excluir archivos innecesarios
# ‚úÖ Revisar cambios con 'git diff' antes de hacer commit


# CONVENCIONES DE COMMITS
# ------------------------

# Add: Nueva funcionalidad
git commit -m "Add: nueva visualizaci√≥n de CNN"

# Fix: Correcci√≥n de bug
git commit -m "Fix: error en funci√≥n de activaci√≥n"

# Update: Actualizaci√≥n de funcionalidad existente
git commit -m "Update: mejorar rendimiento de backpropagation"

# Docs: Cambios en documentaci√≥n
git commit -m "Docs: actualizar README con ejemplos"

# Refactor: Refactorizaci√≥n de c√≥digo
git commit -m "Refactor: reorganizar estructura de clases"

# Style: Cambios de formato
git commit -m "Style: formatear c√≥digo seg√∫n PEP 8"

# Test: A√±adir o modificar tests
git commit -m "Test: a√±adir pruebas para neurona simple"
